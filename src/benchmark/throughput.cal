namespace benchmark:
    import all counters;

    // Simply calculates the throughput of inputs values received
    // Matrix size is the total number of values used to represent a matrix
    // If the matrix is 8x8, the matrixSize is 64
    actor PrintThroughput(uint matrixSize, uint(size=32) seconds) double In ==>:
        uint(size=32) relativeStartTime;

        uint(size=64) tokenCounter;
        uint(size=64) lastTokenCounter;

        initialize ==> 
        do
            relativeStartTime := timeMSec();
            tokenCounter := 0;
            lastTokenCounter := 0;
        end

        action In:[_] ==>
        var
            uint(size=32) currentTime
        do
            // -- Increase the token Counter
            tokenCounter := tokenCounter + 1;

            // -- Get the current time
            currentTime := timeMSec();
            
            // -- Display the Throuhgput every defined seconds
            if (currentTime - relativeStartTime > seconds * 1000) then
                begin
                var 
                    double throuhgput,
                    double meanTime
                do
                    throuhgput := 1000 * (tokenCounter - lastTokenCounter) / (currentTime - relativeStartTime);
                    relativeStartTime := currentTime;
                    lastTokenCounter := tokenCounter;

                    println("Raw throughput : " + throuhgput + " tokens/sec");
                    println("Matrices processed per second: " + throuhgput / matrixSize);
                    meanTime := 1 / (throuhgput / matrixSize);
                    println("Mean time for matrix decomposition: " + meanTime + " ms");

                end    
            end
        end
    end
end