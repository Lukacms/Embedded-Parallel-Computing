output = """Matrix A:
1 1 1 1 1 1 1 1 
2 2 2 2 2 -2 2 2 
3 3 3 3 3 3 3 3 
-1 4 4 4 4 4 -4 4 
5 5 5 5 50 5 5 5 
6 6 6 6 6 6 6 6 
-6 7 7 7 7 7 7 7 
8 8 8 8 8 8 8 9 
Matrix A:
1 1 1 1 1 1 1 1 
2 2 2 2 2 -2 2 2 
3 3 3 3 3 3 3 3 
-1 4 4 4 4 4 -4 4 
5 5 5 5 50 5 5 5 
6 6 6 6 6 6 6 6 
-6 7 7 7 7 7 7 7 
8 8 8 8 8 8 8 9 
Matrix A:
1 1 1 1 1 1 1 1 
2 2 2 2 2 -2 2 2 
3 3 3 3 3 3 3 3 
-1 4 4 4 4 4 -4 4 
5 5 5 5 50 5 5 5 
6 6 6 6 6 6 6 6 
-6 7 7 7 7 7 7 7 
8 8 8 8 8 8 8 9 
Matrix Q:
-0.0753779 -0.0378965 -0.214988 0.114023 0.0590081 -0.010404 -0.964402 -1.13206e-07 
-0.150756 -0.0757929 -0.135859 -0.350569 0.100836 0.905541 -3.15327e-08 -5.37011e-08 
-0.226134 -0.113689 0.944351 -0.0122237 0.02155 0.0873873 -0.189445 -2.75414e-08 
0.0753778 -0.363897 -0.0211314 0.866492 0.0275596 0.311304 0.113894 -5.01899e-09 
-0.376889 -0.189482 -0.0927485 -0.0203728 -0.901684 4.4226e-09 -7.59058e-09 8.4771e-09 
-0.452267 -0.227379 -0.111298 -0.0244473 0.248823 -0.148196 0.0830279 0.8 
0.452267 -0.817285 0.00812745 -0.333266 -0.0105998 -0.119732 -0.0438052 1.93038e-09 
-0.603023 -0.303172 -0.148398 -0.0325965 0.331764 -0.197594 0.110704 -0.6 
Matrix Q:
-0.0753779 -0.0378965 -0.214988 0.114023 0.0590081 -0.010404 -0.964402 -1.13206e-07 
-0.150756 -0.0757929 -0.135859 -0.350569 0.100836 0.905541 -3.15327e-08 -5.37011e-08 
-0.226134 -0.113689 0.944351 -0.0122237 0.02155 0.0873873 -0.189445 -2.75414e-08 
0.0753778 -0.363897 -0.0211314 0.866492 0.0275596 0.311304 0.113894 -5.01899e-09 
-0.376889 -0.189482 -0.0927485 -0.0203728 -0.901684 4.4226e-09 -7.59058e-09 8.4771e-09 
-0.452267 -0.227379 -0.111298 -0.0244473 0.248823 -0.148196 0.0830279 0.8 
0.452267 -0.817285 0.00812745 -0.333266 -0.0105998 -0.119732 -0.0438052 1.93038e-09 
-0.603023 -0.303172 -0.148398 -0.0325965 0.331764 -0.197594 0.110704 -0.6 
Matrix Q:
-0.0753779 -0.0378965 -0.214988 0.114023 0.0590081 -0.010404 -0.964402 -1.13206e-07 
-0.150756 -0.0757929 -0.135859 -0.350569 0.100836 0.905541 -3.15327e-08 -5.37011e-08 
-0.226134 -0.113689 0.944351 -0.0122237 0.02155 0.0873873 -0.189445 -2.75414e-08 
0.0753778 -0.363897 -0.0211314 0.866492 0.0275596 0.311304 0.113894 -5.01899e-09 
-0.376889 -0.189482 -0.0927485 -0.0203728 -0.901684 4.4226e-09 -7.59058e-09 8.4771e-09 
-0.452267 -0.227379 -0.111298 -0.0244473 0.248823 -0.148196 0.0830279 0.8 
0.452267 -0.817285 0.00812745 -0.333266 -0.0105998 -0.119732 -0.0438052 1.93038e-09 
-0.603023 -0.303172 -0.148398 -0.0325965 0.331764 -0.197594 0.110704 -0.6 
Matrix R:
-13.2665 -7.01014 -7.01014 -7.01014 -23.9702 -6.40712 -7.61316 -7.61316 
0 -12.4442 -12.4442 -12.4442 -20.9709 -12.141 -9.53302 -12.7474 
0 0 0 0 -4.17368 0.543437 0.169051 -0.148398 
0 0 0 0 -0.916775 1.40228 -6.93194 -0.0325961 
0 0 0 0 -40.5758 -0.403345 -0.220477 0.331764 
0 0 0 0 0 -3.62216 -2.49043 -0.197594 
3.14362e-07 0 0 0 0 0 -0.911148 0.110704 
0 0 0 0 0 0 0 -0.6 
Matrix R:
-13.2665 -7.01014 -7.01014 -7.01014 -23.9702 -6.40712 -7.61316 -7.61316 
0 -12.4442 -12.4442 -12.4442 -20.9709 -12.141 -9.53302 -12.7474 
0 0 0 0 -4.17368 0.543437 0.169051 -0.148398 
0 0 0 0 -0.916775 1.40228 -6.93194 -0.0325961 
0 0 0 0 -40.5758 -0.403345 -0.220477 0.331764 
0 0 0 0 0 -3.62216 -2.49043 -0.197594 
3.14362e-07 0 0 0 0 0 -0.911148 0.110704 
0 0 0 0 0 0 0 -0.6 
Matrix R:
-13.2665 -7.01014 -7.01014 -7.01014 -23.9702 -6.40712 -7.61316 -7.61316 
0 -12.4442 -12.4442 -12.4442 -20.9709 -12.141 -9.53302 -12.7474 
0 0 0 0 -4.17368 0.543437 0.169051 -0.148398 
0 0 0 0 -0.916775 1.40228 -6.93194 -0.0325961 
0 0 0 0 -40.5758 -0.403345 -0.220477 0.331764 
0 0 0 0 0 -3.62216 -2.49043 -0.197594 
3.14362e-07 0 0 0 0 0 -0.911148 0.110704 
0 0 0 0 0 0 0 -0.6
"""

matrices_A = []
matrices_Q = []
matrices_R = []

lines = output.strip().splitlines()

i = 0

def print_matrix(matrix):
    for row in matrix:
        print(" ".join(f"{val:.6f}" for val in row))

def parse_matrix(lines, start_index):
    matrix = []
    while start_index < len(lines) and lines[start_index].startswith("Matrix"):
        start_index += 1
    while start_index < len(lines) and lines[start_index].strip():
        if lines[start_index].startswith("Matrix"):
            break
        row = list(map(float, lines[start_index].split()))
        matrix.append(row)
        start_index += 1
    return matrix, start_index

while i < len(lines):
    if lines[i].startswith("Matrix A:"):
        matrix_A, i = parse_matrix(lines, i)
        matrices_A.append(matrix_A)
    elif lines[i].startswith("Matrix Q:"):
        matrix_Q, i = parse_matrix(lines, i)
        matrices_Q.append(matrix_Q)
    elif lines[i].startswith("Matrix R:"):
        matrix_R, i = parse_matrix(lines, i)
        matrices_R.append(matrix_R)
    else:
        i += 1

print("Found matrices:")
print(f"Number of A matrices: {len(matrices_A)}")
print(f"Number of Q matrices: {len(matrices_Q)}")
print(f"Number of R matrices: {len(matrices_R)}")

assert len(matrices_A) == len(matrices_Q) == len(matrices_R), "Mismatch in number of matrices A, Q, and R"

import sys
sys.path.append("..")
sys.path.append("test")

from qrd import mat_mul
EPSILON = 1e-4

def compare_matrices(A, B):
    assert len(A) == len(B) and len(A[0]) == len(B[0]), "Matrix size mismatch"

    D = [[A[i][j] - B[i][j] for j in range(len(A[0]))] for i in range(len(A))]
    for i in range(len(D)):
        for j in range(len(D[0])):
            if abs(D[i][j]) >= EPSILON:
                print_matrix(A)
                print()
                print_matrix(B)
                print()
                print_matrix(D)
                raise AssertionError(f"Invalid matrix value at ({i}, {j}): {D[i][j]} != 0")


for idx, (A, Q, R) in enumerate(zip(matrices_A, matrices_Q, matrices_R)):

    reconstructed_A = mat_mul(Q, R)

    compare_matrices(A, reconstructed_A)

print("All matrices decompositions are valid.")
